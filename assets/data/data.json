[
  {
    "prompt": "Implement a component that displays a list of Santa's elves, sorted alphabetically by their names. Each elf's name should be displayed as a clickable button, and when the button is clicked, the list should be sorted in the opposite order (i.e. Z-A instead of A-Z).",
    "skeleton": "import React from 'react';\n\nconst ElvesList = () => {\n\n  return (\n    <div>\n      {/* TODO: Display a list of Santa's elves, sorted alphabetically by name */}\n    </div>\n  );\n};\n\nexport default ElfSorter;",
    "tipsFree": "You'll need to keep track of the current sort order in the component's state, \nand use the onClick event for the buttons to toggle the sort order.",
    "solution": "import React, { useState } from 'react';\n\nconst ElvesList = () => {\n  const [elves, setElves] = useState([\n    'Buddy',\n    'Jovie',\n    'Kate',\n    'Michael',\n    'Santa'\n  ]);\n\n  const [sortAscending, setSortAscending] = useState(true);\n\n  const sortElves = () => {\n    const sortedElves = [...elves].sort((a, b) => {\n      if (sortAscending) {\n        return a.localeCompare(b);\n      } else {\n        return b.localeCompare(a);\n      }\n    });\n    setElves(sortedElves);\n    setSortAscending(!sortAscending);\n  };\n\n  return (\n    <div>\n      <button onClick={sortElves}>Sort Elves</button>\n      <ul>\n        {elves.map(elf => (\n          <li key={elf}>\n            <button onClick={sortElves}>{elf}</button>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nexport default ElvesList;",
    "explanation": "In this example, the ElvesList component maintains the state of the list of elves and the current sorting order in its internal state using the useState hook. When the Sort Elves button is clicked, the list of elves is sorted in ascending or descending order, depending on the current sorting order, and the state is updated to reflect the new order of the elves. When the button for an individual elf is clicked, the list is sorted in the opposite order."
  },
  {
    "prompt": "Create an interactive virtual piano with seven labeled button keys (C, D, E, F, G, A, B). When the user clicks on a button change its inner JSX code to have a star symbol beside the letter name. As a bonus challenge, change the CSS to make the keys look like a piano. You can also try to add sound to the keys.",
    "skeleton": "import React, { useState } from 'react';\n\nconst notes = ['C', 'D', 'E', 'F', 'G', 'A', 'B'];\n\nconst PianoKey = ({ note, isPressed, onPress }) => (\n  <button onClick={() => onPress(note)}>\n    // TODO: Add visual representation of piano key here\n  </button>\n);\n\nconst Piano = ({ pressedNotes, onPressKey }) => (\n  <div>\n    {notes.map(note => (\n      // TODO: Add PianoKey component for each note here\n      {}\n   ))}\n  </div>\n);\n\nconst App = () => {\n  const [pressedNotes, setPressedNotes] = useState([]);\n\n  const onPressKey = note => {\n    setPressedNotes(prevPressedNotes =>\n      prevPressedNotes.includes(note)\n        ? prevPressedNotes.filter(n => n !== note)\n        : [...prevPressedNotes, note]\n    );\n  };\n\n  return <Piano pressedNotes={pressedNotes} onPressKey={onPressKey} />;\n};\n\nexport default App;",
    "tipsFree": "The template contains the basic structure of the code and some placeholder comments indicating where the missing pieces should go. It should provide a good starting point for implementing the desired functionality.",
    "solution": "import React,{useState} from 'react';\n\nconst notes = ['C', 'D', 'E', 'F', 'G', 'A', 'B'];\n\nconst PianoKey = ({ note, isPressed, onPress }) => (\n  <button onClick={() => onPress(note)}>\n    {isPressed ? note + '*' : note}\n  </button>\n);\n\nconst Piano = ({ pressedNotes, onPressKey }) => (\n  <div>\n    {notes.map(note => (\n      <PianoKey\n        key={note}\n        note={note}\n        isPressed={pressedNotes.includes(note)}\n        onPress={onPressKey}\n      />\n    ))}\n  </div>\n);\n\nconst App = () => {\n  const [pressedNotes, setPressedNotes] = useState([]);\n\n  const onPressKey = note => {\n    setPressedNotes(prevPressedNotes =>\n      prevPressedNotes.includes(note)\n        ? prevPressedNotes.filter(n => n !== note)\n        : [...prevPressedNotes, note]\n    );\n  };\n\n  return <Piano pressedNotes={pressedNotes} onPressKey={onPressKey} />;\n};\n\nexport default App;",
    "explanation": "The PianoKey component is a simple button that represents a single piano key. The component takes the following props:\n\nnote: The musical note represented by the piano key\nisPressed: Whether the piano key is currently pressed or not\nonPress: A function to call when the piano key is pressed\nWhen the PianoKey component is rendered, it displays the note prop as the button text, and adds an asterisk (*) to the end of the text if the isPressed prop is true. When the button is clicked, it calls the onPress function with the note prop as an argument.\n\nThe Piano component is a container for the piano keys. The component takes the following props:\n\npressedNotes: An array of the currently pressed piano keys\nonPressKey: A function to call when a piano key is pressed\nWhen the Piano component is rendered, it uses the notes array to generate a PianoKey component for each note in the array. It passes the note, isPressed, and onPress props to the PianoKey component, using the pressedNotes prop to determine whether the isPressed prop should be true or false, and the onPressKey prop as the onPress prop for the PianoKey component.\n\nThe App component is the root component of the app. It uses React's useState hook to manage the component's state, which is an array of the currently pressed piano keys. The component has an onPressKey function that is called when a piano key is pressed. The function updates the component's state by adding the pressed note to the array if it's not already in the array, or removing it if it's already in the array.\n\nWhen the App component is rendered, it passes the pressedNotes state and the onPressKey function as props to the Piano component. This allows the Piano component to render the correct PianoKey components and handle user interactions with the piano keys."
  },
  {
    "prompt": "Create a simple React application that allows users to customize their hot chocolate. The application should have three inputs:\n\nThe type of hot chocolate mix (e.g. regular, dark, white)\nThe type of milk (e.g. whole, skim, almond)\nThe type of toppings (e.g. marshmallows, whipped cream, cinnamon)\nWhen the user selects the type of hot chocolate mix, the application should display the corresponding image of the hot chocolate mix. For example, if the user selects \"dark\" hot chocolate mix, the application should display an image of a cup of dark hot chocolate.\n\nWhen the user selects the type of milk and toppings, the application should update the image of the hot chocolate to reflect the user's choices. For example, if the user selects \"skim\" milk and \"whipped cream\" topping, the application should display an image of a cup of hot chocolate with skim milk and whipped cream on top.",
    "skeleton": "",
    "tipsFree": "To complete this challenge, you will need to use React's state to store the user's choices and update the image accordingly. You will also need to use JavaScript's onChange event to update the state when the user selects a new option.",
    "solution": "import React, { useState } from 'react';\n\nconst HotChocolateCustomizer = () => {\n  // Use the useState hook to manage the component's state\n  const [mix, setMix] = useState('regular');\n  const [milk, setMilk] = useState('whole');\n  const [toppings, setToppings] = useState('marshmallows');\n\n  return (\n    <div>\n      <h1>Hot Chocolate Customizer</h1>\n      <form>\n        <label>\n          Mix:\n          <select value={mix} onChange={(event) => setMix(event.target.value)}>\n            <option value=\"regular\">Regular</option>\n            <option value=\"dark\">Dark</option>\n            <option value=\"white\">White</option>\n          </select>\n        </label>\n        <br />\n        <label>\n          Milk:\n          <select value={milk} onChange={(event) => setMilk(event.target.value)}>\n            <option value=\"whole\">Whole</option>\n            <option value=\"skim\">Skim</option>\n            <option value=\"almond\">Almond</option>\n          </select>\n        </label>\n        <br />\n        <label>\n          Toppings:\n          <select value={toppings} onChange={(event) => setToppings(event.target.value)}>\n            <option value=\"marshmallows\">Marshmallows</option>\n            <option value=\"whipped cream\">Whipped Cream</option>\n            <option value=\"cinnamon\">Cinnamon</option>\n          </select>\n        </label>\n      </form>\n      <br />\n      <p>\n        Your hot chocolate: {mix} with {milk} milk and {toppings} topping.\n      </p>\n    </div>\n  );\n}\n\nexport default HotChocolateCustomizer;",
    "explanation": "In this example, the HotChocolateCustomizer functional component uses React's useState hook to manage the component's state. The useState hook returns an array with two elements: the current value of the state, and a function to update the state. In the example above, we destructure the array to create three state variables: mix, milk, and toppings. We then use these state variables to render the component's UI and update their values using the update functions returned by the useState hook."
  },
  {
    "prompt": "Make an elf on the shelf app. Use the useState hook to create a new state variable called elfPosition. This variable will represent the current position of the Elf on the Shelf.\nUse the useEffect hook to randomly update the elfPosition state variable every few seconds (you can use the setInterval function for this). This will simulate the Elf moving around the house.\nUse the elfPosition state variable to render the Elf on the Shelf at the correct position on the screen. Bonus: play around with the CSS of the App to give it some personality!",
    "skeleton": "import React, { useState, useEffect } from 'react';\n\nfunction App() {\n  // TODO: Use the useState hook to manage the Elf's position\n\n\n  // TODO: Use the useEffect hook to generate a random position for the Elf every 2 seconds\n  useEffect(() => {\n    const interval = setInterval(() => {\n      // Generate a random position for the Elf. This can be done with a randomly generated number\n    }, 2000);\n\n    // Return a cleanup function to clear the interval when the component unmounts\n    return () => clearInterval(interval);\n  }, []); // Pass an empty array to the useEffect hook to only run it once\n\n  return (\n    <div>\n      <h1>Elf on the Shelf</h1>\n      {/* TODO: Use the elfPosition state variable to set the padding-left style of a p element */}\n      {/* This will give us some visual feedback about the Elf's position on the page */}\n\n    </div>\n  );\n}\n\nexport default App;",
    "tipsFree": "For now we can simulate a moving elf by using a <p> tag and setting its margin-left to the elfPosition",
    "solution": "import React, { useState, useEffect } from 'react';\n\nfunction App() {\n  const [elfPosition, setElfPosition] = useState(null);\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      // Generate a random position for the Elf\n      const newElfPosition = Math.random()*100;\n      setElfPosition(newElfPosition);\n    }, 2000);\n\n    return () => clearInterval(interval);\n  }, []);\n\n  return (\n    <div>\n      <h1>Elf on the Shelf</h1>\n      {/* By giving our elfPosition variable to the style, we are able to get some cool visual feedback */}\n      {elfPosition && <p style={{paddingLeft:elfPosition}}>Elf position: {elfPosition}</p>}\n    </div>\n  );\n}\n\nexport default App;",
    "explanation": "Import the useState and useEffect hooks from the react package at the top of the file.\nUse the useState hook to manage the Elf's position. Initialize the state with a null value, and provide a setElfPosition function to update the state.\nUse the useEffect hook to generate a random position for the Elf every 2 seconds. Use the setInterval function to call a function that generates a random position and updates the Elf's position using the setElfPosition function. Return a cleanup function that clears the setInterval when the component unmounts.\nUse the elfPosition state variable in the component's render method to set the padding-left style of a p element. This will give us some visual feedback about the Elf's position on the page."
  },
  {
    "prompt": "Santa is having trouble keeping track of the naughty and nice children and needs your help. Create a react JS app that will allow Santa to write the name of a child and click 'naughty' or 'nice' to add them to their respected list. Bonus: add some holiday themed CSS to go with the theme",
    "skeleton": "import React from 'react';\n\nconst App = () => {\n  const [naughtyKids, setNaughtyKids] = React.useState([]);\n  const [niceKids, setNiceKids] = React.useState([]);\n\n  // Add the handleSort function here\n\n  // Add a reference to the input field here\n\n  return (\n    <div>\n      <h1>Santa's Naughty and Nice List</h1>\n      {/* Add the input field here */}\n      {/* Add the buttons here */}\n      <h2>Naughty List</h2>\n      {/* Add list here */}\n      <h2>Nice List</h2>\n      {/* Add list here */}\n    </div>\n  );\n};\n\nexport default App;",
    "tipsFree": "Create a handleSort function that takes a child's name and boolean to determine naughty/nice as arguments and adds the child to the appropriate list.",
    "solution": "import React,{useState} from 'react';\n\nconst App = () => {\n  const [naughtyKids, setNaughtyKids] = useState([]);\n  const [niceKids, setNiceKids] = useState([]);\n\n  const handleSort = (name, isNaughty) => {\n    if (isNaughty) {\n      setNaughtyKids([...naughtyKids, name]);\n    } else {\n      setNiceKids([...niceKids, name]);\n    }\n  };\n\n  // Add a reference to the input field\n  const inputRef = React.useRef(null);\n\n  return (\n    <div>\n      <h1>Santa's Naughty and Nice List</h1>\n      <input type=\"text\" placeholder=\"Enter a child's name\" ref={inputRef} />\n      <button onClick={() => handleSort(inputRef.current.value, true)}>Naughty</button>\n      <button onClick={() => handleSort(inputRef.current.value, false)}>Nice</button>\n      <h2>Naughty List</h2>\n      {/* This app assumes all kids have different names. Set keys to a uuid to further improve this app */}\n      <ul>\n        {naughtyKids.map((kid) => (\n          <li key={kid}>{kid}</li>\n        ))}\n      </ul>\n      <h2>Nice List</h2>\n      <ul>\n        {niceKids.map((kid) => (\n          <li key={kid}>{kid}</li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nexport default App;",
    "explanation": ""
  }
]