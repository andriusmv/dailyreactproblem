[
  {
    "title": "Elf Name Sorter",
    "emoji": "🎄",
    "prompt": "Implement a component that displays a list of Santa's elves, sorted alphabetically by their names. Each elf's name should be displayed and when the order button is clicked, the list should be sorted in the opposite order (i.e. Z-A instead of A-Z).",
    "skeleton": "XWBWBWY/a05cf7d4381a4675ffdc1a2fede6034f",
    "tipsFree": "You'll need to keep track of the current sort order in the component's state, \nand use the onClick event for the buttons to toggle the sort order.",
    "solution": "ExpYgLm/cd22c3df969fecc2f2ccd10ec28c7e5f",
    "explanation": "In this example, the ElvesList component maintains the state of the list of elves and the current sorting order in its internal state using the useState hook. When the Sort Elves button is clicked, the list of elves is sorted in ascending or descending order, depending on the current sorting order, and the state is updated to reflect the new order of the elves. When the button for an individual elf is clicked, the list is sorted in the opposite order.",
    "difficulty": 2
  },
  {
    "title": "Virtual Piano",
    "emoji": "🎹",
    "prompt": "Create an interactive virtual piano with seven labeled button keys (C, D, E, F, G, A, B). When the user clicks on a button change its inner JSX code to have a star symbol beside the letter name. As a bonus challenge, change the CSS to make the keys look like a piano. You can also try to add sound to the keys.",
    "skeleton": "LYBEVrB/016cc8d67f3118eff51d4d7a548fea36",
    "tipsFree": "The template contains the basic structure of the code and some placeholder comments indicating where the missing pieces should go. It should provide a good starting point for implementing the desired functionality.",
    "solution": "qByEdPo/f14f4e08aa28b6c40124c37184aeb6a6",
    "explanation": "The PianoKey component is a simple button that represents a single piano key. The component takes the following props:\n\nnote: The musical note represented by the piano key\nisPressed: Whether the piano key is currently pressed or not\nonPress: A function to call when the piano key is pressed\nWhen the PianoKey component is rendered, it displays the note prop as the button text, and adds an asterisk (*) to the end of the text if the isPressed prop is true. When the button is clicked, it calls the onPress function with the note prop as an argument.\n\nThe Piano component is a container for the piano keys. The component takes the following props:\n\npressedNotes: An array of the currently pressed piano keys\nonPressKey: A function to call when a piano key is pressed\nWhen the Piano component is rendered, it uses the notes array to generate a PianoKey component for each note in the array. It passes the note, isPressed, and onPress props to the PianoKey component, using the pressedNotes prop to determine whether the isPressed prop should be true or false, and the onPressKey prop as the onPress prop for the PianoKey component.\n\nThe App component is the root component of the app. It uses React's useState hook to manage the component's state, which is an array of the currently pressed piano keys. The component has an onPressKey function that is called when a piano key is pressed. The function updates the component's state by adding the pressed note to the array if it's not already in the array, or removing it if it's already in the array.\n\nWhen the App component is rendered, it passes the pressedNotes state and the onPressKey function as props to the Piano component. This allows the Piano component to render the correct PianoKey components and handle user interactions with the piano keys.",
    "difficulty": 3
  },
  {
    "title": "Hot Chocolate Customizer",
    "emoji": "☕",
    "prompt": "Create a simple React application that allows users to customize their hot chocolate. The application should have three inputs:\n\nThe type of hot chocolate mix (e.g. regular, dark, white)\nThe type of milk (e.g. whole, skim, almond)\nThe type of toppings (e.g. marshmallows, whipped cream, cinnamon)\nWhen the user selects the type of hot chocolate mix, the application should display the corresponding image of the hot chocolate mix. For example, if the user selects \"dark\" hot chocolate mix, the application should display an image of a cup of dark hot chocolate.\n\nWhen the user selects the type of milk and toppings, the application should update the image of the hot chocolate to reflect the user's choices. For example, if the user selects \"skim\" milk and \"whipped cream\" topping, the application should display an image of a cup of hot chocolate with skim milk and whipped cream on top.",
    "skeleton": "WNKbvqG/d77e0fb77b561a9a7d2036f9384f22d9",
    "tipsFree": "To complete this challenge, you will need to use React's state to store the user's choices and update the image accordingly. You will also need to use JavaScript's onChange event to update the state when the user selects a new option.",
    "solution": "VwBYLqq/dc5b729e4b68749f693d64678f7a5cfa",
    "explanation": "In this example, the HotChocolateCustomizer functional component uses React's useState hook to manage the component's state. The useState hook returns an array with two elements: the current value of the state, and a function to update the state. In the example above, we destructure the array to create three state variables: mix, milk, and toppings. We then use these state variables to render the component's UI and update their values using the update functions returned by the useState hook.",
    "difficulty": 2
  },
  {
    "title": "Santa's Naughty and Nice List",
    "emoji": "🎅",
    "prompt": "Santa is having trouble keeping track of the naughty and nice children and needs your help. Create a react JS app that will allow Santa to write the name of a child and click 'naughty' or 'nice' to add them to their respected list. Bonus: add some holiday themed CSS to go with the theme",
    "skeleton": "WNKbQQR/6c603c42b4cb236450646ad23b2a783a",
    "tipsFree": "Create a handleSort function that takes a child's name and boolean to determine naughty/nice as arguments and adds the child to the appropriate list.",
    "solution": "GRBgpgR/3fa5df3c8b6087a90223a70ea5381a08",
    "explanation": "This component uses the useState hook to manage its state, with two state variables: naughtyKids and niceKids. These state variables are used to store the lists of naughty and nice children.\n\nThe handleSort function is used to add a child's name to the appropriate list. It accepts two arguments: the name of the child and a boolean value indicating whether the child is naughty or nice. If the child is naughty, the function adds their name to the naughtyKids list; if they are nice, it adds their name to the niceKids list.\n\nThe component also includes an input field and two buttons for sorting the children. The inputRef variable is a reference to the input field, which is created using the useRef hook. The handleSort function is called when either of the buttons is clicked, with the value of the input field passed as the child's name and the value of the button (true for \"naughty\" or false for \"nice\") passed as the isNaughty argument.\n\nFinally, the component renders the lists of naughty and nice children using the naughtyKids and niceKids state variables. It does this by mapping over each list and rendering a list item element for each child.",
    "difficulty": 2
  },
  {
    "title": "Secure Password Check",
    "emoji": "🔑",
    "prompt": "Make a React application that checks if a password is secure. To be considered secure it must include one special character(!, @, #, etc...) and have a minimum length of 8 characters. Make the user enter the password twice and verify that passwords match. If passwords match and are secure provide a success message, otherwise display instructions for creating a secure password.",
    "skeleton": "NWBPGgj/daacc4de09a26e8c1637d1ab6554af56",
    "tipsFree": "To check if the password includes at least one special character, you can use a regular expression. A regular expression is a pattern that can be used to match characters in a string. For example, the regular expression /[^A-Za-z0-9]/ will match any character that is not a letter or a number. You can use this regular expression to check if the password includes at least one special character by testing it against the password string using the test() method. Example: hasSpecialCharacter = /[^A-Za-z0-9]/.test('hello'). hasSpecialCharacter will equal False.",
    "solution": "WNKbQop/cd25c10326317793c548f285000f5f5b",
    "explanation": "First, you'll need to create a form with two password input fields, one for the user to enter their password and another for them to confirm their password. You can use the input element with the type attribute set to \"password\" to create a password input field.\n\nNext, you'll need to add some logic to check if the passwords match. You can do this by creating a function that compares the values of the two password input fields and returns true if they match and false if they don't.\n\nTo check if the password includes at least one special character, you can use a regular expression. A regular expression is a pattern that can be used to match characters in a string. For example, the regular expression /[^A-Za-z0-9]/ will match any character that is not a letter or a number. You can use this regular expression to check if the password includes at least one special character by testing it against the password string using the test() method.\n\nTo check if the password has a minimum length of 8 characters, you can simply compare the length of the password string to 8 using the length property.",
    "difficulty": 3
  },
  {
    "title": "Password Maker",
    "emoji": "🔒",
    "prompt": "Create a React application that generates a strong password and give the user the ability to chose the password's length.",
    "skeleton": "dyjPGWO/59e005897ce13caac235d99a0b610a40",
    "tipsFree": "The onChange event may be required to store the user's input.",
    "solution": "ExpaVEr/9af9820ee80c076e6c70c3a722a323ac",
    "explanation": "The App function is a React component that returns a form element with a label, input field, and button. The input field allows the user to specify the desired password length, and the button calls the generatePassword function when clicked.\n\nThe generatePassword function generates a random password using a combination of uppercase letters, lowercase letters, numbers, and special characters. It does this by creating a string of all possible characters, and then using a loop to select random characters from this string to build the password.\n\nThe useState hook is used to manage the component's state. It initializes two state variables: password and passwordLength. The password variable stores the generated password, and the passwordLength variable stores the desired password length specified by the user. The setPassword and setPasswordLength functions are used to update these state variables.",
    "difficulty": 3
  },
  {
    "title": "Nutrition Table",
    "emoji": "🍎",
    "prompt": "Create a React application that displays nutritional facts about different foods in an organized table.",
    "skeleton": "vYaEGYj/7547d79d50e0ab88030a06ec58a0b898",
    "tipsFree": "You will need to use the map method to go over each food in the foodData objetc.",
    "solution": "rNraxda/d6960b7d5629b05085681131b07dbd9d",
    "explanation": "This component displays a table with a heading row that includes the column names \"Food\", \"Calories\", \"Fat (g)\", and \"Protein (g)\". The table body is populated with rows for each of the 3 foods in the foodData array, using the map function to iterate through the array and create a table row for each object. The table cells in each row display the corresponding values for the food's name, calories, fat, and protein.",
    "difficulty": 2
  },
  {
    "title": "Animal Inventor",
    "emoji": "🦜",
    "prompt": "Create an animal inventor app that combines the names of two animals in an array.\nTo complete this task you must:\nRemove the last two characters of the first animal’s name,\nRemove the first two characters of the second animal’s name,\nEnsure that the same animal name is not used twice.\nExample output: panbra (panda+zebra)",
    "skeleton": "dyjYZvq/f5f920f6ca9c7cb271c83d4488938e32",
    "tipsFree": "Math.random should be used to generate random indexes for the animal names",
    "solution": "JjBYOoO/1d434f46439ebe0625053cbee1af33c9",
    "explanation": "This React app generates random animal names by combining the beginning of one animal name with the end of another animal name. It does this by using the useState hook to create a state variable called name and a function called setName for updating the value of name. The app also has a list of animal names stored in the animals array.\n\nWhen the user clicks the \"new animal\" button, the generateName function is called. This function uses the Math.random method to generate two random indexes, one for each animal name that will be combined to create the new name. It then uses these indexes to retrieve the corresponding animal names from the animals array and combines them to create the new name. Finally, the setName function is called to update the value of name with the new animal name.\n\nThe app then renders the name state variable and the \"new animal\" button in the JSX returned by the App component's render function. When the user clicks the button, the generateName function is called and the name state variable is updated with a new animal name, causing the app to re-render and display the new name to the user.",
    "difficulty": 4
  },
  {
    "title": "Pig Latin",
    "emoji": "🐖",
    "prompt": "Create an app that translates English text into Pig Latin and displays the result in a pop-up window.",
    "skeleton": "LYBpOjB/6fd53851ea7af6a4fa658dc326c8b1af",
    "tipsFree": "To translate a word into Pig Latin, you move the first consonant or group of consonants to the end of the word and add \"ay\" to the end. If the word begins with a vowel, you simply add \"way\" to the end.\n\"Hello\" becomes \"Ellohay\" in Pig Latin.\n\"Apple\" becomes \"Appleway\" in Pig Latin.",
    "solution": "wvxKPev/56683e7de50a7039fe13ab078a408b78",
    "explanation": "This app is a Pig Latin translator that allows users to enter some text and have it magically transformed into Pig Latin with the click of a button. It works by using the useState hook to manage state and the ReactDOM.render function to render the app in the browser.\n\nWhen the app is rendered, it displays a form with a textarea for the user to enter their text and a \"Translate\" button. As the user types, the app updates a state variable called \"text\" to reflect the current contents of the textarea. When the user clicks the \"Translate\" button, the app calls a function called translateToPigLatin to translate the text to Pig Latin.\n\nThe translateToPigLatin function starts by splitting the text into an array of words using the split method. It then iterates over the array of words and translates each one to Pig Latin using a set of rules. If the word starts with a vowel, it simply adds \"way\" to the end of the word. If the word starts with a consonant, it moves all the consonants before the first vowel to the end of the word and adds \"ay\" to the end.\n\nOnce all of the words have been translated, the function joins the translated words back into a single string and returns it. The app then displays an alert with the translated text to the user, allowing them to marvel at their newly transformed words in all of their Pig Latin glory.",
    "difficulty": 4
  },
  {
    "title": "Super Hero Name",
    "emoji": "🦸",
    "prompt": "Create a React app that allows users to generate a unique super hero name based on their birth month and day. The app should display a form with two dropdown menus for the user to select their birth month and day, and a \"Submit\" button. When the user clicks the \"Submit\" button, the app should generate the super hero name by combining a positive adjective from a list with a funny noun from another list, based on the selected birth month and day. The app should then display the super hero name to the user.",
    "skeleton": "vYaNWRP/79180dbe0f4c24be648d00867d88f062",
    "tipsFree": "One way to efficiently render the options for the birth day select element is to use a loop. One option is to use the Array.from() method to create an array of numbers from 1 to 31, and then use the map() function to create the option elements for each day. Here is an example of how this could be implemented:\n\n{Array.from({length: 31}, (v, i) => i + 1).map((day) => (\n  <option value={day}>{day}</option>\n))}\nThis creates an array of numbers from 1 to 31 using Array.from(), and then uses the map() function to iterate over the array and create an option element for each day. The map() function returns an array of JSX elements, which can be rendered within the select element.\n\nAlternatively, you could use a for loop to create the option elements:\n\n{for (let day = 1; day <= 31; day++) {\n  return <option value={day}>{day}</option>;\n}}\nEither of these approaches can be used to efficiently render the options for the birth day select element.",
    "solution": "abjvVLq/9173bd2c50eb26a3a9a08489599e7584",
    "explanation": "This app is a fun tool that allows users to generate a unique super hero name based on their birth month and day. It uses the useState hook to manage state and the ReactDOM.render function to render the app in the browser.\n\nWhen the app is rendered, it displays a form with two dropdown menus for the user to select their birth month and day, and a \"Submit\" button. The app also has two lists of words stored in the positiveAdjectives and funnyNouns arrays.\n\nWhen the user selects their birth month and day from the dropdown menus and clicks the \"Submit\" button, the app calls a function called handleSubmit to generate the super hero name. The handleSubmit function uses the selected birth month and day to retrieve the corresponding words from the positiveAdjectives and funnyNouns arrays and combines them to create the super hero name. It then updates the value of the heroName state variable with the new super hero name, causing the app to re-render and display the new name to the user.\n\nSo, if you've ever wanted to know what your super hero name would be if you were born in the month of May and on the 15th day, this is the app for you! Simply select those options from the dropdown menus and click the \"Submit\" button to find out.",
    "difficulty": 4
  },
  {
    "title": "Trivia",
    "emoji": "🧠",
    "prompt": "Create a React app that displays two buttons, each containing a trivia question. When a user clicks on a button, an alert should appear with the answer to the corresponding question. The app should have a list of at least two trivia questions and answers that it can use to populate the buttons. The questions and answers can be about any topic, such as geography, history, science, or general knowledge.",
    "skeleton": "BaPomGo/3ef3fe660a1b51969b9823818890ad9a",
    "tipsFree": "In JavaScript, the alert function displays a pop-up window with a message to the user and requires the user to click \"OK\" to close it.",
    "solution": "bGjVYmp/0e7bac236ec26bd00d4756e9c48a2e18",
    "explanation": "This code is a fun trivia game that tests your knowledge of geography and other general facts! It uses the useState hook to manage state and the ReactDOM.render function to render the app in the browser.\n\nWhen the app is rendered, it displays two buttons, each containing a question. When you click on a button, an alert appears with the answer to the corresponding question. The questions and answers are stored in an object called triviaQuestions, which contains two properties: question1 and question2. Each of these properties has a question property that contains the text of the question, and an answer property that contains the correct answer.",
    "difficulty": 3
  },
  {
    "title": "Pixel Artist",
    "emoji": "🖼️",
    "prompt": "Create a pixel art app that allows users to create colorful designs by clicking on a grid of pixels. The app should have a grid of 256 pixels arranged in a 16 x 16 grid. Each pixel should be initially white, but when clicked, it should change color based on the number of times it has been clicked. If a pixel is clicked once, it should turn black. If it is clicked again, it should turn white again. The app should allow users to keep clicking on the pixels to create a variety of patterns and designs. Use React to build the app and manage state.",
    "skeleton": "MWBarWr/d523bac16946282227c56ee9d4bd8417",
    "tipsFree": "You could create the pixels array and initialize it with 256 null values, which will correspond to the white pixels. Play around with CSS to make the pixels look how you like.",
    "solution": "MWBaOZE/e322382d01f72961b0eecbd043a688de",
    "explanation": "When the app is rendered, it displays a grid of 256 pixels arranged in a 16 x 16 grid. Each pixel is initially white, but when you click on it, it changes color based on the number of times it has been clicked. If you click on a pixel once, it turns black. If you click on it again, it turns white again. You can keep clicking on the pixels to create a variety of patterns and designs.\n\nThe app uses an array of pixels to keep track of the state of each pixel in the grid. The array is initialized with 256 null values, which correspond to the white pixels. When you click on a pixel, the app updates the corresponding element in the array with the number of times the pixel has been clicked. It then uses this information to determine the color of the pixel and update the state accordingly.",
    "difficulty": 6
  },
  {
    "title": "Cookie Clicker",
    "emoji": "🍪",
    "prompt": "Create a React app that allows a user to click a button and see an emoji change in response. When the app first loads, the emoji displayed should be a single cookie emoji ('🍪'). When the user clicks the button, the app should increment a counter of clicks and check if the number of clicks is even. If it is, the app should add another cookie emoji to the display. For example, if the user clicks the button three times, the display should show '🍪🍪🍪'. If the user clicks the button ten or more times, the app should also display the text 'Victory!' Use state variables and React's useState hook to keep track of the number of clicks and the current emoji display, and update these variables using the setClicks and setEmoji functions when the button is clicked.",
    "skeleton": "RwBWxKW/522c965be62a5fbb49c4708a4e62d199",
    "tipsFree": "To check if a number is even in React, you can use the modulo operator (%) to check if the remainder of the number divided by 2 is equal to 0.",
    "solution": "ExpVoyO/302140309ed0458b90a5b980ca00c1f3",
    "explanation": "This is a simple React app that allows a user to click a button and see an emoji change in response. When the app first loads, the emoji displayed is a single cookie emoji ('🍪'). When the user clicks the button, the app increments a counter of clicks and checks if the number of clicks is even. If it is, the app adds another cookie emoji to the display. For example, if the user clicks the button three times, the display will show '🍪🍪🍪'. If the user clicks the button ten or more times, the app will also display the text 'Victory!'. The app uses state variables and React's useState hook to keep track of the number of clicks and the current emoji display, and updates these variables using the setClicks and setEmoji functions when the button is clicked. The app then renders the emoji display and button in the browser using the ReactDOM.render function.",
    "difficulty": 2
  },
  {
    "title": "Text Case Change",
    "emoji": "🔤",
    "prompt": "Create a text converter that allows the user to input text, select a conversion type (uppercase, lowercase, or capitalization), and convert the text to the selected conversion type.",
    "skeleton": "NWBGXjv/3a5e5edc789a8256bf494346177ef109",
    "tipsFree": "There are functions to turn text lowercase and uppercase, however capitalization gets a little tricky.",
    "solution": "WNKQdRE/8041c4f7e85887b77a5208832af28128",
    "explanation": "This code is a React application that allows the user to convert a piece of text from one form to another. The user can input text into an input field and choose from a dropdown menu which type of conversion they want to perform on the text. The available options are uppercase, lowercase, and capitalization.\n\nThe application has three state variables: inputText, outputText, and conversionType. inputText is the text that the user inputs into the input field, outputText is the text that is displayed after the conversion has been performed, and conversionType is the type of conversion that the user has selected from the dropdown menu.\n\nThe application has three functions: handleInputChange, handleSelectChange, and handleConvertClick. handleInputChange is called when the user types into the input field and updates the inputText state variable with the new input value. handleSelectChange is called when the user selects a new option from the dropdown menu and updates the conversionType state variable with the new value. handleConvertClick is called when the user clicks the \"Convert\" button and performs the conversion on the inputText using the conversionType selected by the user. It then updates the outputText state variable with the converted text and displays it in the output field.",
    "difficulty": 5
  },
  {
    "title": "Color Background",
    "emoji": "🎨",
    "prompt": "Create a color picker app that allows the user to select a color by adjusting the red, green, and blue values. When the user changes a value, the background color of the body element should update to reflect the new color. Display the opposite color as the text color for the app title",
    "skeleton": "zYLvQzG/7a013aa00cbf0eea2311a411a708b654",
    "tipsFree": "To get the opposite of an RGB color, you can subtract each of the RGB values from 255. For example, the opposite of RGB(100, 0, 0) would be RGB(155, 255, 255).",
    "solution": "oNMjpoN/9b82196475954a886b906d4a17233130",
    "explanation": "This code is creating a React component called App. This component has three pieces of state: red, green, and blue, which are initially set to 0. These pieces of state are used to store the values of the three color inputs.\n\nThe component has three input elements for the user to enter values for the red, green, and blue color channels. Each input element has an onChange event handler that updates the corresponding piece of state with the new value from the input.\n\nThe component also has a function called updateBodyBackground that updates the background color of the body element to the current values of the red, green, and blue state variables. This function is called when the user focuses out of an input element.\n\nThe component also calculates the opposite values for the red, green, and blue channels and uses these values to set the color of an h1 element. This causes the text color to be the opposite of the background color.",
    "difficulty": 3
  },
  {
    "title": "Pokemon",
    "emoji": "🐱",
    "prompt": "Create a React app that displays a list of Pokémon from the Pokémon API. The app should initially display 8 Pokémon and have a \"Show More\" button that fetches and displays the next 8 Pokémon when clicked. The app should also display a loading spinner while the next batch of Pokémon is being fetched.",
    "skeleton": "PoBPvdB/e265e7ebbaa59d25ccd9b540295a51b4",
    "tipsFree": "Use the fetch function to make the HTTP request to the API. The fetch function returns a promise that resolves to a Response object, which you can then convert to JSON using the json method.\n\nConsider using the async and await keywords to simplify the code and make it easier to read. This will allow you to use the await keyword inside an async function to wait for the fetch promise to resolve before continuing with the rest of the code.",
    "solution": "OJwyYzE/630d2fb1da5d22cc0013861d2c8831a1",
    "explanation": "The App component is defined as a functional component using an arrow function. It contains several state variables: pokemon, offset, and loading. These are initialized using the useState hook.\n\nThe useEffect hook is used to perform an asynchronous operation when the component mounts (when the component is first rendered) or when the value of offset changes. In this case, the hook makes an HTTP request to the Pokémon API to retrieve a list of Pokémon. The response is then used to update the pokemon state variable and the loading state variable is set to false.\n\nThe handleShowMore function is defined to handle the \"Show more\" button's onClick event. It increments the offset state variable by 8, which will trigger the useEffect hook to make another HTTP request to the Pokémon API with the updated offset value.\n\nThe component renders a list of Pokémon by mapping over the pokemon state variable and rendering a div element for each Pokémon. It also renders the \"Show more\" button, which is only displayed if loading is false.",
    "difficulty": 5
  },
  {
    "title": "QR Code",
    "emoji": "",
    "prompt": "Create a React app that lets the user input a website name and recieve a generated QR code when they click 'submit'",
    "skeleton": "OJwMJvK/3c64eada48dc20a3d4ca2aa98dc897a6",
    "tipsFree": "Creating an image element and setting its src to https://api.qrserver.com/v1/create-qr-code/?size=150x150&data=${google.com} will generate a qr code",
    "solution": "zYLrYRE/71d72d726ae3a70d8d21b9096d8ea599",
    "explanation": "The component uses two state variables: website and qrUrl. The website state variable holds the value of the website input field, and the qrUrl state variable holds the URL of the QR code image.\n\nThe component has a single form element with a text input field for the website URL and a submit button. When the form is submitted, the component's handleSubmit function is called, which prevents the default form submission behavior and sets the qrUrl state variable to the URL of a QR code image generated by the QR Server API. The handleSubmit function is passed as the onSubmit prop to the form element.\n\nThe component also has a div element with the class name \"qr-holder\". If the qrUrl state variable is truthy (i.e., not an empty string), the div element will render an img element with the src attribute set to the value of the qrUrl state variable.",
    "difficulty": 5
  }
]
