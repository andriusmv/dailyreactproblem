[
  {
    "title": "Elf Name Sorter",
    "emoji": "🎄",
    "prompt": "Implement a component that displays a list of Santa's elves, sorted alphabetically by their names. Each elf's name should be displayed and when the order button is clicked, the list should be sorted in the opposite order (i.e. Z-A instead of A-Z).",
    "skeleton": "XWBWBWY",
    "tipsFree": "You'll need to keep track of the current sort order in the component's state, \nand use the onClick event for the buttons to toggle the sort order.",
    "solution": "ExpYgLm",
    "explanation": "In this example, the ElvesList component maintains the state of the list of elves and the current sorting order in its internal state using the useState hook. When the Sort Elves button is clicked, the list of elves is sorted in ascending or descending order, depending on the current sorting order, and the state is updated to reflect the new order of the elves. When the button for an individual elf is clicked, the list is sorted in the opposite order."
  },
  {
    "title": "Virtual Piano",
    "emoji": "🎹",
    "prompt": "Create an interactive virtual piano with seven labeled button keys (C, D, E, F, G, A, B). When the user clicks on a button change its inner JSX code to have a star symbol beside the letter name. As a bonus challenge, change the CSS to make the keys look like a piano. You can also try to add sound to the keys.",
    "skeleton": "LYBEVrB",
    "tipsFree": "The template contains the basic structure of the code and some placeholder comments indicating where the missing pieces should go. It should provide a good starting point for implementing the desired functionality.",
    "solution": "qByEdPo",
    "explanation": "The PianoKey component is a simple button that represents a single piano key. The component takes the following props:\n\nnote: The musical note represented by the piano key\nisPressed: Whether the piano key is currently pressed or not\nonPress: A function to call when the piano key is pressed\nWhen the PianoKey component is rendered, it displays the note prop as the button text, and adds an asterisk (*) to the end of the text if the isPressed prop is true. When the button is clicked, it calls the onPress function with the note prop as an argument.\n\nThe Piano component is a container for the piano keys. The component takes the following props:\n\npressedNotes: An array of the currently pressed piano keys\nonPressKey: A function to call when a piano key is pressed\nWhen the Piano component is rendered, it uses the notes array to generate a PianoKey component for each note in the array. It passes the note, isPressed, and onPress props to the PianoKey component, using the pressedNotes prop to determine whether the isPressed prop should be true or false, and the onPressKey prop as the onPress prop for the PianoKey component.\n\nThe App component is the root component of the app. It uses React's useState hook to manage the component's state, which is an array of the currently pressed piano keys. The component has an onPressKey function that is called when a piano key is pressed. The function updates the component's state by adding the pressed note to the array if it's not already in the array, or removing it if it's already in the array.\n\nWhen the App component is rendered, it passes the pressedNotes state and the onPressKey function as props to the Piano component. This allows the Piano component to render the correct PianoKey components and handle user interactions with the piano keys."
  },
  {
    "title": "Hot Chocolate Customizer",
    "emoji": "☕",
    "prompt": "Create a simple React application that allows users to customize their hot chocolate. The application should have three inputs:\n\nThe type of hot chocolate mix (e.g. regular, dark, white)\nThe type of milk (e.g. whole, skim, almond)\nThe type of toppings (e.g. marshmallows, whipped cream, cinnamon)\nWhen the user selects the type of hot chocolate mix, the application should display the corresponding image of the hot chocolate mix. For example, if the user selects \"dark\" hot chocolate mix, the application should display an image of a cup of dark hot chocolate.\n\nWhen the user selects the type of milk and toppings, the application should update the image of the hot chocolate to reflect the user's choices. For example, if the user selects \"skim\" milk and \"whipped cream\" topping, the application should display an image of a cup of hot chocolate with skim milk and whipped cream on top.",
    "skeleton": "WNKbvqG",
    "tipsFree": "To complete this challenge, you will need to use React's state to store the user's choices and update the image accordingly. You will also need to use JavaScript's onChange event to update the state when the user selects a new option.",
    "solution": "VwBYLqq",
    "explanation": "In this example, the HotChocolateCustomizer functional component uses React's useState hook to manage the component's state. The useState hook returns an array with two elements: the current value of the state, and a function to update the state. In the example above, we destructure the array to create three state variables: mix, milk, and toppings. We then use these state variables to render the component's UI and update their values using the update functions returned by the useState hook."
  },
  {
    "title": "Santa's Naughty and Nice List",
    "emoji": "🎅",
    "prompt": "Santa is having trouble keeping track of the naughty and nice children and needs your help. Create a react JS app that will allow Santa to write the name of a child and click 'naughty' or 'nice' to add them to their respected list. Bonus: add some holiday themed CSS to go with the theme",
    "skeleton": "WNKbQQR",
    "tipsFree": "Create a handleSort function that takes a child's name and boolean to determine naughty/nice as arguments and adds the child to the appropriate list.",
    "solution": "GRBgpgR",
    "explanation": "This component uses the useState hook to manage its state, with two state variables: naughtyKids and niceKids. These state variables are used to store the lists of naughty and nice children.\n\nThe handleSort function is used to add a child's name to the appropriate list. It accepts two arguments: the name of the child and a boolean value indicating whether the child is naughty or nice. If the child is naughty, the function adds their name to the naughtyKids list; if they are nice, it adds their name to the niceKids list.\n\nThe component also includes an input field and two buttons for sorting the children. The inputRef variable is a reference to the input field, which is created using the useRef hook. The handleSort function is called when either of the buttons is clicked, with the value of the input field passed as the child's name and the value of the button (true for \"naughty\" or false for \"nice\") passed as the isNaughty argument.\n\nFinally, the component renders the lists of naughty and nice children using the naughtyKids and niceKids state variables. It does this by mapping over each list and rendering a list item element for each child."
  },
  {
    "title": "Secure Password Check",
    "emoji": "🔑",
    "prompt": "Make a React application that checks if a password is secure. To be considered secure it must include one special character(!, @, #, etc...) and have a minimum length of 8 characters. Make the user enter the password twice and verify that passwords match. If passwords match and are secure provide a success message, otherwise display instructions for creating a secure password.",
    "skeleton": "NWBPGgj",
    "tipsFree": "To check if the password includes at least one special character, you can use a regular expression. A regular expression is a pattern that can be used to match characters in a string. For example, the regular expression /[^A-Za-z0-9]/ will match any character that is not a letter or a number. You can use this regular expression to check if the password includes at least one special character by testing it against the password string using the test() method. Example: hasSpecialCharacter = /[^A-Za-z0-9]/.test('hello'). hasSpecialCharacter will equal False.",
    "solution": "WNKbQop",
    "explanation": "First, you'll need to create a form with two password input fields, one for the user to enter their password and another for them to confirm their password. You can use the input element with the type attribute set to \"password\" to create a password input field.\n\nNext, you'll need to add some logic to check if the passwords match. You can do this by creating a function that compares the values of the two password input fields and returns true if they match and false if they don't.\n\nTo check if the password includes at least one special character, you can use a regular expression. A regular expression is a pattern that can be used to match characters in a string. For example, the regular expression /[^A-Za-z0-9]/ will match any character that is not a letter or a number. You can use this regular expression to check if the password includes at least one special character by testing it against the password string using the test() method.\n\nTo check if the password has a minimum length of 8 characters, you can simply compare the length of the password string to 8 using the length property."
  },
  {
    "title": "Password Maker",
    "emoji": "🔒",
    "prompt": "Create a React application that generates a strong password and give the user the ability to chose the password's length.",
    "skeleton": "dyjPGWO",
    "tipsFree": "The onChange event may be required to store the user's input.",
    "solution": "ExpaVEr",
    "explanation": "The App function is a React component that returns a form element with a label, input field, and button. The input field allows the user to specify the desired password length, and the button calls the generatePassword function when clicked.\n\nThe generatePassword function generates a random password using a combination of uppercase letters, lowercase letters, numbers, and special characters. It does this by creating a string of all possible characters, and then using a loop to select random characters from this string to build the password.\n\nThe useState hook is used to manage the component's state. It initializes two state variables: password and passwordLength. The password variable stores the generated password, and the passwordLength variable stores the desired password length specified by the user. The setPassword and setPasswordLength functions are used to update these state variables."
  },
  {
    "title": "Nutrition Table",
    "emoji": "🍎",
    "prompt": "Create a React application that displays nutritional facts about different foods in an organized table.",
    "skeleton": "vYaEGYj",
    "tipsFree": "You will need to use the map method to go over each food in the foodData objetc.",
    "solution": "rNraxda",
    "explanation": "This component displays a table with a heading row that includes the column names \"Food\", \"Calories\", \"Fat (g)\", and \"Protein (g)\". The table body is populated with rows for each of the 3 foods in the foodData array, using the map function to iterate through the array and create a table row for each object. The table cells in each row display the corresponding values for the food's name, calories, fat, and protein."
  }
]